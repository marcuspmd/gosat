name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-backend:
    name: Backend Tests (PHP)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: gosat
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.4
        extensions: pdo, pdo_pgsql, redis, curl, json, mbstring, xml, bcmath
        coverage: xdebug

    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install PHP dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Create .env file
      run: |
        cp .env.example .env
        sed -i 's/DB_HOST=postgres/DB_HOST=localhost/' .env
        sed -i 's/DB_DATABASE=gosat/DB_DATABASE=gosat/' .env
        sed -i 's/REDIS_HOST=127.0.0.1/REDIS_HOST=localhost/' .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Run database migrations
      run: php artisan migrate --force

    - name: Run PHPStan analysis
      run: ./vendor/bin/phpstan analyse --memory-limit=2G

    - name: Run Laravel Pint (code style)
      run: ./vendor/bin/pint --test

    - name: Run Pest tests
      run: ./vendor/bin/pest --parallel --coverage

  test-frontend:
    name: Frontend Tests (Node.js)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Node.js dependencies
      run: npm ci

    - name: Run Vite build
      run: npm run build

    - name: Check for build artifacts
      run: |
        if [ ! -d "public/build" ]; then
          echo "❌ Build artifacts not found in public/build"
          exit 1
        fi
        echo "✅ Build artifacts created successfully"
        ls -la public/build/

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build PHP Docker image
      run: docker compose build app

    - name: Build Node Docker image
      run: docker compose build node

    - name: Setup environment for Docker
      run: |
        cp .env.example .env

    - name: Test containers startup
      run: |
        docker compose up -d postgres redis
        sleep 10
        docker compose up -d app node
        sleep 15
        docker compose ps

    - name: Install dependencies in containers
      run: |
        docker compose exec -T app composer install --no-progress --prefer-dist --optimize-autoloader
        docker compose exec -T node npm ci

    - name: Test application health
      run: |
        docker compose exec -T app php artisan --version
        docker compose exec -T node npm --version

    - name: Cleanup
      if: always()
      run: docker compose down -v

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start full environment
      run: |
        cp .env.example .env
        docker compose up -d
        sleep 30

    - name: Install dependencies in containers
      run: |
        docker compose exec -T app composer install --no-progress --prefer-dist --optimize-autoloader
        docker compose exec -T node npm ci

    - name: Run migrations in container
      run: docker compose exec -T app php artisan migrate --force

    - name: Run full test suite
      run: docker compose exec -T app ./vendor/bin/pest --parallel

    - name: Build assets in container
      run: docker compose exec -T node npm run build

    - name: Test API endpoints
      run: |
        # Test basic Laravel routes
        curl -f http://localhost:8080/ || exit 1
        curl -f http://localhost:8080/api/health || echo "Health endpoint not implemented yet"

    - name: Cleanup
      if: always()
      run: docker compose down -v
